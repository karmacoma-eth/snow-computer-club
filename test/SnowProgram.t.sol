// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";

import "src/SnowComputerClub.sol";
import "src/TicTacToe.sol";

contract SnowProgramTest is Test {
    uint256 public gasPerRun = 50_000;

    SnowComputerClub public club;
    TicTacToe public tictactoe;

    address CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;

    function setUp() public {
       club = new SnowComputerClub();
       tictactoe = new TicTacToe();
    }

    function testClubCanBeStored() public {
        uint256[64] memory buffer;
        (uint8 index, uint256 value) = club.run{gas: gasPerRun}(buffer, 0);
        require(index < 64, "Should return index");
        require(buffer[index] != value, "Should update value");
    }

    function testTicTacToeOutput() public {
        uint256[64] memory canvas;
        uint256 index;
        uint256 value;

        // with a blank canvas, we paint the first tile
        (index, value) = tictactoe.run(canvas, 0);
        assertEq(index, 40);
        assertEq(value, 0x0001000108090c11046106410281010107810c4118213011001100010001ffff);

        // if the first tile has been painted, we paint the second one
        canvas[index] = value;
        (index, value) = tictactoe.run(canvas, 0);
        assertEq(index, 41);
        assertEq(value, 0x8001800183f18611841198099009b011a011a011a031906198c187818001ffff);

        // if the first tile has been stomped on, it gets repainted
        canvas[40] = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
        (index, value) = tictactoe.run(canvas, 0);
        assertEq(index, 40);
        assertEq(value, 0x0001000108090c11046106410281010107810c4118213011001100010001ffff);
    }

    function testDeploy() public {
        (bool succ, bytes memory data) = CREATE2_FACTORY.call(hex"000000000000000000000000000000000000000000000009000000000e4984a6608060405234801561001057600080fd5b50610574806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806306fdde031461005c57806352f1d28314610097578063a377c0cd146100ca578063c860ebc6146100df578063fc7f8b05146100f2575b600080fd5b604080518082018252601081526f29b737bba1b7b6b83aba32b921b63ab160811b6020820152905161008e91906103db565b60405180910390f35b6100b273f53d926c13af77c53afae6b33480ddd94b16761081565b6040516001600160a01b03909116815260200161008e565b6100dd6100d8366004610448565b61011e565b005b6000546100b2906001600160a01b031681565b610105610100366004610487565b6102de565b6040805160ff909316835260208301919091520161008e565b6040516331a9108f60e11b815260048101839052339073f53d926c13af77c53afae6b33480ddd94b16761090636352211e90602401602060405180830381865afa158015610170573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019491906104ba565b6001600160a01b0316146101ef5760405162461bcd60e51b815260206004820152601d60248201527f596f7520646f206e6f74206f776e2074686973206163636573734b657900000060448201526064015b60405180910390fd5b60405163496d940b60e11b815260048101839052309073f53d926c13af77c53afae6b33480ddd94b167610906392db281690602401602060405180830381865afa158015610241573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026591906104ba565b6001600160a01b0316146102bb5760405162461bcd60e51b815260206004820152601e60248201527f4d7573742064656c656761746520746f207468697320636f6e7472616374000060448201526064016101e6565b600080546001600160a01b0319166001600160a01b039290921691909117905550565b6000805481906001600160a01b031661035b57829150838360ff1660408110610309576103096104de565b602002013560405160200161032091815260200190565b6040516020818303038152906040528051906020012060001c848460ff166040811061034e5761034e6104de565b60200201351890506103d4565b60005460405163fc7f8b0560e01b81526001600160a01b039091169063fc7f8b059061038d90879087906004016104f4565b60408051808303816000875af11580156103ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cf9190610510565b915091505b9250929050565b600060208083528351808285015260005b81811015610408578581018301518582016040015282016103ec565b8181111561041a576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461044557600080fd5b50565b6000806040838503121561045b57600080fd5b82359150602083013561046d81610430565b809150509250929050565b60ff8116811461044557600080fd5b600080610820838503121561049b57600080fd5b6108008301848111156104ad57600080fd5b8392503561046d81610478565b6000602082840312156104cc57600080fd5b81516104d781610430565b9392505050565b634e487b7160e01b600052603260045260246000fd5b61082081016108008085843760ff841681840152509392505050565b6000806040838503121561052357600080fd5b825161052e81610478565b602093909301519294929350505056fea2646970667358221220df808e09cbff15021c8a73092a623534be5bdf1b247fe9fd170a468ebf508ef164736f6c634300080f0033");
        assertEq(succ, true);
        assertEq(data.length, 20);

        address addr;
        assembly {
            addr := mload(add(data, 20))
        }

        assertEq(addr, 0xc001c0de2D7ac3b783D86D59506587383B0438B2);
    }
}
